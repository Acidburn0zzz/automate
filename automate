#!/usr/bin/env python

# copyright 2011-2012 Stefano Karapetsas <stefano@karapetsas.com>

# This file is part of AutoMate.
#
# AutoMate is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# AutoMate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with AutoMate.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import atexit
import cowbuilder
import functions
import glob
import incoming
import os
import pwd
import sys

from configobj import ConfigObj

# arguments
parser = argparse.ArgumentParser()
parser.add_argument("--debug", action="store_true")
parser.add_argument("--instance", type=str, default="automate")
args = parser.parse_args()

# this will remove the lock file at exit
def goodbye(lock_file):
    os.remove(lock_file)

# check if user is root
usrinfo = pwd.getpwuid(os.getuid())
if not usrinfo.pw_name == "root":
    print "E: root privileges required!"
    sys.exit(1)

automate_path = os.path.dirname(os.path.realpath(__file__))
instance_path = os.path.join(automate_path, "instances", args.instance

config = ConfigObj(os.path.join(instante_path, "automate.conf"))

incoming_path = os.path.join(instance_path, "upload")
builds_path = os.path.join(instance_path, "builds")
queue_path = os.path.join(instance_path, "queue")
run_path = os.path.join(instance_path, "run")

lock_files = glob.glob(os.path.join(run_path, "*.pid"))

# if there are other builders, exit
if len(lock_files) >= int(config['concurrent_builders']):
    sys.exit(0)

lock_file = os.path.join(run_path, str(os.getpid()) + ".pid")

# load changes files
changes_files = glob.glob(os.path.join(incoming_path, "*.changes"))

if len(changes_files) > 0:
    
    incoming_manager = incoming.Incoming(config, incoming_path, builds_path, queue_path)
    incoming_manager.run_queue()

# load build queue
queue_files = glob.glob(os.path.join(queue_path, "*.json"))
# load import to repo requests
import_files = glob.glob(os.path.join(builds_path, "*/import.request"))

if len(queue_files) > 0:
    
    queue_file = sorted(queue_files)[0]
    queue_object = functions.json_load(queue_file)
    
    # delete the file
    os.remove(queue_file)
    
    # open lockfile
    lock_fd = open(lock_file, "w")
    lock_fd.write(queue_file + "\n")
    lock_fd.close()
    atexit.register(goodbye, lock_file)
    
    logs_path = os.path.join(queue_object['source_dir'], "../log")
    if not os.path.exists(logs_path):
        os.makedirs(logs_path)
    
    ret_file = os.path.join(logs_path, queue_object['dist'] + "_" + queue_object['arch'] + ".ret")
    log_file = os.path.join(logs_path, queue_object['dist'] + "_" + queue_object['arch'] + ".log")
    update_log_file = log_file + ".update"
    
    logs_to_remove = [ret_file, log_file, update_log_file]
    for log_to_remove in logs_to_remove:
        if os.path.exists(log_to_remove):
            os.remove(log_to_remove)
    
    if config.as_bool("add_suffix"):
        
        distarch_source_dir = os.path.join(queue_object['source_dir'], "../tmp", \
            queue_object['dist'] + "-" + queue_object['arch'])
        os.makedirs(distarch_source_dir)

        os.system("cp %(src)s %(dst)s" % \
            { "src": os.path.join(queue_object['source_dir'], "*.*"),
              "dst": distarch_source_dir})
        
        os.chdir(distarch_source_dir)
        functions.command_result("dpkg-source -x " + \
            glob.glob(os.path.join(distarch_source_dir, "*.dsc"))[0], False)
        tmp_path = glob.glob(queue_object['package'] + "-*")[0]
        os.chdir(tmp_path)
        
        # adapt the changelog version for the selected distro name
        orig_changelog_file = open("debian/changelog", "r")
        orig_changelog = orig_changelog_file.read().splitlines()
        orig_changelog[0] = orig_changelog[0].replace(")", "+" + queue_object['dist'] + ")")
        if queue_object['dist'] in ["oneiric", "precise"]:
            orig_changelog[0] = orig_changelog[0].replace("unstable", queue_object['dist'])
        orig_changelog_file.close()
        new_changelog = open("debian/changelog", "w")
        new_changelog.write("\n".join(orig_changelog))
        new_changelog.close()
        
        functions.command_result("debuild -S -sa -uc -us", False)
        os.chdir(automate_path)
        
        dsc = glob.glob(os.path.join(distarch_source_dir, "*" + queue_object['dist'] + ".dsc"))[0]
    else:
        dsc = glob.glob(os.path.join(queue_object['source_dir'], "*.dsc"))[0]
    
    functions.debug_message(options.debug, dsc)
    
    # prepare result path
    result_path = os.path.join(queue_object['source_dir'], "../result", \
        queue_object['dist'], queue_object['arch'])
    if not os.path.exists(result_path):
        os.makedirs(result_path)
    
    # cowbuilder
    pbuilderrc_file = os.path.join(instance_path, "pbuilderrc")
    cb = cowbuilder.CowBuilder(queue_object['dist'], queue_object['arch'], pbuilderrc_file, log_file, result_path)
    # apt-get update && apt-get upgrade
    ret = cb.update()
    if ret == 0:
        # start build
        ret = cb.build(dsc)
    
    # ret_file is declared before, because it's removed on rebuild
    ret_fd = open(ret_file, "w")
    ret_fd.write(str(ret))
    ret_fd.close()
    
    # remove temp source dir
    os.system("rm -rf " + distarch_source_dir + "/")

elif len(import_files) > 0:
    
    import_file = import_files[0]
    os.remove(import_file)
    
    build_dir = os.path.dirname(import_file)
    build = functions.json_load(os.path.join(build_dir, "build.json"))
    
    # open lockfile
    lock_fd = open(lock_file, "w")
    lock_fd.write(import_file + "\n")
    lock_fd.close()
    atexit.register(goodbye, lock_file)
    
    log_file = os.path.join(build_dir, "import.log")
    
    # check sha1 of *.orig.tar.xz source if already in repository
    # only for non-native source packages
    src_files = glob.glob(os.path.join(build_dir, "source", "*.orig.*"))
    if len(src_files) == 1:
        src_file = src_files[0]
        src_basename = os.path.basename(src_file)
        if src_basename[0:4] == "lib":
            pool_path = src_basename[0:4]
        else:
            pool_path = src_basename[0]
        for dist in build['dists']:
            src_repo_file = os.path.join(repo_path, functions.distro_name(dist), \
                "pool/main", pool_path, build['package'], src_basename)
            if os.path.exists(src_repo_file):
                if functions.sha1file(src_file) != functions.sha1file(src_repo_file):
                    print "E: %s doesnt match with %s already in repo! Import failed!" % \
                        (src_file, src_repo_file)
                    import_error_file = os.path.join(build_dir, "import.error")
                    import_error_fd = open(import_error_file, "w")
                    import_error_fd.write("%s doesnt match with %s already in repo! Import failed!\n" % \
                        (src_file, src_repo_file))
                    import_error_fd.write("%s %s\n" % (src_file, functions.sha1file(src_file)))
                    import_error_fd.write("%s %s\n\n" % (src_repo_file, functions.sha1file(src_repo_file)))
                    import_error_fd.close()
                    sys.exit(1)

    # import files with reprepro
    for dist in build['dists']:
        
        #hardcode for archs
        os.system("cp %(src)s %(dst)s" % \
            { "src": os.path.join(build_dir, "result", dist, "i386/*"),
              "dst": os.path.join(repo_path, functions.distro_name(dist), "incoming-" + dist)})
        
        os.system("cp %(src)s %(dst)s" % \
            { "src": os.path.join(build_dir, "result", dist, "amd64/*"),
              "dst": os.path.join(repo_path, functions.distro_name(dist), "include-" + dist)})
        
        os.chdir(os.path.join(repo_path, functions.distro_name(dist)))
        
        #FIXME: move reprepro commands in shell script into automate
        os.system("./processincoming-%(dist)s.sh >> %(log)s" % \
            { "dist": dist,
              "log": log_file})
        os.system("./includedebs-%(dist)s.sh >> %(log)s" % \
            { "dist": dist,
              "log": log_file})
        os.chdir(automate_path)
